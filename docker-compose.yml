version: "3.8"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - election_network

  kafka:
    image: confluentinc/cp-kafka:latest
    #restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 20s
    networks:
      - election_network

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: papamor
      POSTGRES_PASSWORD: papamor
      POSTGRES_DB: ElectionDB
    ports:
      - "5432:5432" # pour un accès depuis l'extérieur (optionnel)
    #volumes:
    #  - postgres-data:/var/lib/postgresql/data # Persistance des données (optionnel)
    networks:
      - election_network

  generate_data:
    build:
      context: .
      dockerfile: Dockerfile-generate-data
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - election_network

  spark_streaming:
    build:
      context: .
      dockerfile: Dockerfile-spark
    #restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SPARK_LOCAL_IP: spark_streaming
    networks:
      - election_network

networks:
  election_network:
